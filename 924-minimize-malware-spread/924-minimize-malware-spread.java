class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        parent = new int[graph.length];
        size = new int[graph.length];
        for(int i=0; i<parent.length; i++) parent[i] = i;
        Arrays.fill(size, 1);
        
        for(int i=0; i<graph.length; i++){
            for(int j=0; j<graph[0].length; j++){
                if(i != j && graph[i][j] == 1){
                    int l1 = find(i);
                    int l2 = find(j);
                    if(l1 != l2) union(l1, l2);
                }
            }
        }
        
        int[] infectedMap = new int[parent.length];
        
        for(int i:initial){     // To feed the infected index to the lead
            int ri = find(i);
            infectedMap[ri]++;
        }
        
        Arrays.sort(initial);
        
        int ansIdx = initial[0], ansSize = 0;
        for(int i:initial){
            int ri = find(i);
            if(infectedMap[ri] == 1){
                if(size[ri] > ansSize) {
                    ansIdx = i;
                    ansSize = size[ri];
                }
            }
        }
        
        return ansIdx;        
    }
    
    int[]parent;
    int[]size;
    
    public void union(int s1, int s2){
        if(size[s1] > size[s2]) {
            parent[s2] = s1;
            size[s1] += size[s2];
        } else {
            parent[s1] = s2;
            size[s2] += size[s1];
        }
    }
    
    public int find(int x){
        if(parent[x] == x) return x;
        return parent[x] = find(parent[x]);
    }
}